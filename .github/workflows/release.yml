name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: release_notes
        run: |
          # Simplified approach: generate basic changelog for now
          echo "Generating release notes from git commits"
          
          # Get the previous tag  
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          if [ -z "$PREV_TAG" ]; then
            # First release - get recent commits
            CHANGELOG=$(git log --pretty=format:"- %s" --reverse -n 10)
          else
            # Get commits since previous tag
            CHANGELOG=$(git log ${PREV_TAG}..HEAD --pretty=format:"- %s" --reverse)
          fi
          
          # Create simple release body
          echo "## ðŸš€ butterfly-dl v2.0.0 - Workspace Architecture Migration" > release_body.md
          echo "" >> release_body.md
          echo "### Changes:" >> release_body.md
          echo "$CHANGELOG" >> release_body.md
          echo "" >> release_body.md
          echo "See [Migration Summary](MIGRATION_SUMMARY.md) for detailed information." >> release_body.md
          
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: ðŸš€ butterfly-dl ${{ steps.get_version.outputs.version }}
          body_path: release_body.md
          draft: false
          prerelease: false

  build:
    name: Build
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            output: butterfly-dl
            archive: tar.gz
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            output: butterfly-dl
            archive: tar.gz
          - target: x86_64-apple-darwin
            os: macos-latest
            output: butterfly-dl
            archive: tar.gz
          - target: aarch64-apple-darwin
            os: macos-latest
            output: butterfly-dl
            archive: tar.gz
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            output: butterfly-dl.exe
            archive: zip

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Configure cross-compilation
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          echo "[target.aarch64-unknown-linux-gnu]" >> ~/.cargo/config.toml
          echo "linker = \"aarch64-linux-gnu-gcc\"" >> ~/.cargo/config.toml

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-

      - name: Build binary
        run: |
          cargo build --release -p butterfly-dl --target ${{ matrix.target }}

      - name: Strip binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            aarch64-linux-gnu-strip target/${{ matrix.target }}/release/${{ matrix.output }}
          else
            strip target/${{ matrix.target }}/release/${{ matrix.output }}
          fi

      - name: Create archive
        id: archive
        run: |
          VERSION="${{ needs.create-release.outputs.version }}"
          ARCHIVE_NAME="butterfly-dl-${VERSION}-${{ matrix.target }}"
          
          if [ "${{ matrix.archive }}" = "zip" ]; then
            # Windows zip
            mkdir -p "${ARCHIVE_NAME}"
            cp "target/${{ matrix.target }}/release/${{ matrix.output }}" "${ARCHIVE_NAME}/"
            cp README.md LICENSE "${ARCHIVE_NAME}/"
            # Add migration documentation if available
            [ -f "MIGRATION_SUMMARY.md" ] && cp MIGRATION_SUMMARY.md "${ARCHIVE_NAME}/" || true
            7z a "${ARCHIVE_NAME}.zip" "${ARCHIVE_NAME}/*"
            echo "archive_name=${ARCHIVE_NAME}.zip" >> $GITHUB_OUTPUT
            echo "archive_path=${ARCHIVE_NAME}.zip" >> $GITHUB_OUTPUT
          else
            # Unix tar.gz
            mkdir -p "${ARCHIVE_NAME}"
            cp "target/${{ matrix.target }}/release/${{ matrix.output }}" "${ARCHIVE_NAME}/"
            cp README.md LICENSE "${ARCHIVE_NAME}/"
            # Add migration documentation if available
            [ -f "MIGRATION_SUMMARY.md" ] && cp MIGRATION_SUMMARY.md "${ARCHIVE_NAME}/" || true
            # Add FFI libraries if they exist (only for native builds)
            if [ "${{ matrix.target }}" = "x86_64-unknown-linux-gnu" ] || [ "${{ matrix.target }}" = "x86_64-apple-darwin" ]; then
              cp target/${{ matrix.target }}/release/libbutterfly_dl.* "${ARCHIVE_NAME}/" 2>/dev/null || true
            fi
            tar czf "${ARCHIVE_NAME}.tar.gz" "${ARCHIVE_NAME}"
            echo "archive_name=${ARCHIVE_NAME}.tar.gz" >> $GITHUB_OUTPUT
            echo "archive_path=${ARCHIVE_NAME}.tar.gz" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Generate checksum
        id: checksum
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            sha256sum "${{ steps.archive.outputs.archive_path }}" > "${{ steps.archive.outputs.archive_path }}.sha256"
          else
            shasum -a 256 "${{ steps.archive.outputs.archive_path }}" > "${{ steps.archive.outputs.archive_path }}.sha256"
          fi
          echo "checksum_file=${{ steps.archive.outputs.archive_path }}.sha256" >> $GITHUB_OUTPUT
        shell: bash

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ steps.archive.outputs.archive_path }}
            ${{ steps.checksum.outputs.checksum_file }}

  checksums:
    name: Generate Combined Checksums
    needs: [create-release, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Generate combined checksums  
        run: |
          # Create combined checksums file with header
          echo "# SHA256 Checksums for butterfly-dl ${{ needs.create-release.outputs.version }}" > checksums.txt
          echo "" >> checksums.txt
          echo "This file contains SHA256 checksums for all release binaries." >> checksums.txt
          echo "Verify downloads using: sha256sum -c checksums.txt" >> checksums.txt
          echo "" >> checksums.txt
          
          # Since checksum files are uploaded as release assets rather than artifacts,
          # we'll document the verification process and available checksums
          echo "Individual platform checksums are available as separate .sha256 files:" >> checksums.txt
          echo "- butterfly-dl-${{ needs.create-release.outputs.version }}-x86_64-linux.tar.gz.sha256" >> checksums.txt
          echo "- butterfly-dl-${{ needs.create-release.outputs.version }}-aarch64-linux.tar.gz.sha256" >> checksums.txt
          echo "- butterfly-dl-${{ needs.create-release.outputs.version }}-x86_64-macos.tar.gz.sha256" >> checksums.txt
          echo "- butterfly-dl-${{ needs.create-release.outputs.version }}-aarch64-macos.tar.gz.sha256" >> checksums.txt
          echo "- butterfly-dl-${{ needs.create-release.outputs.version }}-x86_64-windows.zip.sha256" >> checksums.txt
          echo "" >> checksums.txt
          echo "Download the appropriate .sha256 file alongside your binary to verify integrity." >> checksums.txt

      - name: Upload Combined Checksums
        uses: softprops/action-gh-release@v2
        with:
          files: checksums.txt
