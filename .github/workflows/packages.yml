name: Package Distribution

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to package (e.g., v1.4.2)'
        required: true
        type: string

permissions:
  contents: write
  packages: write

env:
  CARGO_TERM_COLOR: always

jobs:
  debian-packages:
    name: Build Debian Packages
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            arch: amd64
          - target: aarch64-unknown-linux-gnu
            arch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Configure cross-compilation
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          mkdir -p ~/.cargo
          echo "[target.aarch64-unknown-linux-gnu]" >> ~/.cargo/config.toml
          echo "linker = \"aarch64-linux-gnu-gcc\"" >> ~/.cargo/config.toml

      - name: Install cargo-deb
        run: cargo install cargo-deb

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-deb-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Build Debian package
        run: |
          # Build the binary first
          cargo build --release --target ${{ matrix.target }}
          
          # Create Debian package
          cargo deb --target ${{ matrix.target }} --no-build

      - name: Rename package file
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          ORIGINAL_NAME=$(find target/${{ matrix.target }}/debian -name "*.deb" -type f)
          NEW_NAME="butterfly-dl_${VERSION#v}_${{ matrix.arch }}.deb"
          mv "$ORIGINAL_NAME" "$NEW_NAME"
          echo "DEB_FILE=$NEW_NAME" >> $GITHUB_ENV

      - name: Generate package checksum
        run: |
          sha256sum "$DEB_FILE" > "$DEB_FILE.sha256"

      - name: Upload Debian package as artifact
        uses: actions/upload-artifact@v4
        with:
          name: debian-package-${{ matrix.arch }}
          path: |
            ${{ env.DEB_FILE }}
            ${{ env.DEB_FILE }}.sha256
          retention-days: 30

      - name: Upload to GitHub Release (if tag)
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ env.DEB_FILE }}
            ${{ env.DEB_FILE }}.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  crates-publish:
    name: Publish to Crates.io
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-crates-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Verify package
        run: |
          cargo check --all-targets
          cargo test --all-targets --features ci-tests-disabled

      - name: Package for crates.io
        run: cargo package --verbose --allow-dirty

      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }} --allow-dirty
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  package-summary:
    name: Package Summary
    runs-on: ubuntu-latest
    needs: [debian-packages, crates-publish]
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v5

      - name: Generate package summary
        run: |
          echo "# Package Distribution Summary" > package_summary.md
          echo "" >> package_summary.md
          echo "## Debian Packages" >> package_summary.md
          
          for arch in amd64 arm64; do
            if [ -d "debian-package-$arch" ]; then
              echo "### $arch Architecture" >> package_summary.md
              ls -la "debian-package-$arch/" >> package_summary.md
              echo "" >> package_summary.md
            fi
          done
          
          echo "## Crates.io Publication" >> package_summary.md
          echo "- Status: ${{ needs.crates-publish.result }}" >> package_summary.md
          echo "" >> package_summary.md
          
          echo "## Installation Instructions" >> package_summary.md
          echo "" >> package_summary.md
          echo "### Debian/Ubuntu" >> package_summary.md
          echo "\`\`\`bash" >> package_summary.md
          echo "wget https://github.com/${{ github.repository }}/releases/latest/download/butterfly-dl_VERSION_amd64.deb" >> package_summary.md
          echo "sudo dpkg -i butterfly-dl_VERSION_amd64.deb" >> package_summary.md
          echo "\`\`\`" >> package_summary.md
          echo "" >> package_summary.md
          echo "### Cargo" >> package_summary.md
          echo "\`\`\`bash" >> package_summary.md
          echo "cargo install butterfly-dl" >> package_summary.md
          echo "\`\`\`" >> package_summary.md
          echo "" >> package_summary.md
          echo "### Homebrew (macOS)" >> package_summary.md
          echo "\`\`\`bash" >> package_summary.md
          echo "# Coming soon - Homebrew tap setup in progress" >> package_summary.md
          echo "\`\`\`" >> package_summary.md

      - name: Upload package summary
        uses: actions/upload-artifact@v4
        with:
          name: package-summary
          path: package_summary.md
          retention-days: 90